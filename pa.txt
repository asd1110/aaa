111111111111111111111findstringcode11122222222
			String result="";
		
		input1=input1.toUpperCase();
		String[] arr=input1.split("\\s");
		int k=arr.length;
		for(int i=0;i<k;i++)
		{ int sum=0;
			int m=arr[i].length();
			for(int j=0;j<m/2;j++)
			{
				sum+=Math.abs(arr[i].charAt(j)-arr[i].charAt(m-1-j));
				
			}
			if(m%2!=0)
			{
				sum+=Math.abs(arr[i].charAt(m/2))-64;
			}
			result+=String.valueOf(sum);
		}
	 return Integer.parseInt(result);  
	}
}


222222222222222222getcodethroughstring22222222222222222222222

	public int getCodeThroughStrings(String input1){
		// Read only region end
		int k=0, sum=0, r=0;
		String[] word=input1.split("\\s");
		for(int i=0;i<word.length;i++)
		{
			k+=word[i].length();
		}
		while(k>0)
		{
			r=k%10;
			sum+=r;
			k=k/10;
		}
		return sum;
	}
}
3333333333333333333cyclicordersums333333333333333333333
int i, a;
		int sum=0;
		int l=(int)((Math.log10(input1))+1);
		for(i=l;i>=0;i--)
		{
			a=input1%10;
		sum=sum+(i*a);
		input1=input1/10;
			} return sum;		
	}
}

8888888888888888encoadedarray/findOriginalFirstAndSum8888888888888888
  int sum=0;
		int[] orig=new int[input2];
		orig[input2-1]=input1[input2-1];
		for(int i=(input2-1);i>=1;i--)
		{
			orig[i-1]=input1[i-1]-orig[i];
		}
		for(int k=0;k<input2;k++)
		{
			sum=sum+orig[k];
		}
		   Result res=new Result(orig[0], sum);
		return res;
    }
}
88888888888898decreasing sequence99898989898898989
 int c=1;
			int c1=0;
			int m=0;
			for(int i=0; i<input2-1; i++){
			
				if(input1[i]>input1[i+1]){
					c++;
				}
				else{
					if(c>1){
					c1++;
						if(m<c){
							m=c;
						}
							c=1;
					}
				}
			}
			if(c>1){
					c1++;
						if(m<c){
							m=c;
						}
						
					}
			Result res = new Result(c1,m);
			return res;
	        
oooooooooooooooooooooooooidentifyPossibleWordsoooooooooooooooooooooooooooooooooooo

	public String identifyPossibleWords(String input1,String input2){
		// Read only region end
		String output="";
		String v=input1.toUpperCase();
		String p=input2.toUpperCase();
		int b=v.indexOf('_');
		
		//String[] k=v.split("_");
		String[] s=p.split(":");
		for(int i=0;i<s.length;i++)
		{
		if(v.substring(0,b).equals(s[i].substring(0,b))&&v.substring(b+1).equals(s[i].substring(b+1)))
			{
				output+=":"+s[i];
			}
		}
		if(output.equals(""))
		{
		output=" ERROR-009";
		}
		return output.substring(1);
	}
}



777777777777777777777777777777biginteger7777777777777777777777777
int sum=0; int carry=0; StringBuffer a= new StringBuffer(); 
	if(input1.length()>input2.length()){
		input2=String.format("%"+input1.length()+"s",input2).replace(" ","0");
	        }	
      if(input1.length()<input2.length()){
		input1=String.format("%"+input2.length()+"s",input1).replace(" ","0");
	        }
	for(int i=input2.length()-1;i>=0;i--){ 
		sum=0;
		sum+=(Integer.parseInt(""+input1.charAt(i))+Integer.parseInt(""+input2.charAt(i)))+carry;
		a.append(sum%10);
		carry=sum/10;
			}
		if(carry!=0){
			a.append(carry);
		}
	   String result= new String(a.reverse());
		return result;
	}
}
iiiiiiiiiiiiiiiiiiiiiiiiiiencoadedthreestringsiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
    public Result encodeThreeStrings(String input1,String input2,String input3){
    	// Read only region end
        String front=null;
		String middle=null;
		String end=null;
		String front1=null;
		String middle1=null;
		String end1=null;
		String front2=null;
		String middle2=null;
		String end2=null;
		int i=input1.length();
		int j=input2.length();
		int k=input3.length();
		if(i%3==0)
	   {int s0=i/3;
		  front=input1.substring(0,s0);
		   middle=input1.substring(s0,2*s0);
		   end=input1.substring(2*s0);
		  	   }
		else if(i%3==1)
	
		{
			int z=(i-1)/3;
			front=input1.substring(0,z);
			middle=input1.substring(z,(z*2)+1);
			end=input1.substring((z*2)+1);
		}
		else if(i%3==2)
		{int s=(i+1)/3;
			front=input1.substring(0,s);
			middle=input1.substring(s,(s*2)-1);
			end=input1.substring((s*2)-1);
		}
				if(j%3==0)
	   {int s1=j/3;
		  front1=input2.substring(0,s1);
		   middle1=input2.substring(s1,2*s1);
		   end1=input2.substring(2*s1);
		  	   }
		else if(j%3==1)
	
		{
			int f=(j-1)/3;
			front1=input2.substring(0,f);
			middle1=input2.substring(f,(f*2)+1);
			end1=input2.substring((f*2)+1);
		}
		else if(j%3==2)
		{int p=(j+1)/3;
			front1=input2.substring(0,p);
			middle1=input2.substring(p,(p*2)-1);
			end1=input2.substring((p*2)-1);
		}
				if(k%3==0)
	   {int s2=k/3;
		  front2=input3.substring(0,s2);
		   middle2=input3.substring(s2,2*s2);
		   end2=input3.substring(2*s2);
		  	   }
		else if(k%3==1)
		{
			int x=(k-1)/3;
			front2=input3.substring(0,x);
			middle2=input3.substring(x,(x*2)+1);
			end2=input3.substring((x*2)+1);
		}
		else if(k%3==2)
		{int y=(k+1)/3;
			front2=input3.substring(0,y);
			middle2=input3.substring(y,(y*2)-1);
			end2=input3.substring((y*2)-1);
		}
		String m=front+front1+front2;
			String n=middle+middle1+middle2;
			String o=(end+end1+end2);
		char[] ch=o.toCharArray();
		String vc="";
		for(int c=0;c<ch.length;c++)
		{
		char cc=ch[c];
			if(Character.isUpperCase(cc))
			{
				vc+=Character.toLowerCase(cc);
			}
			else if(Character.isLowerCase(cc))
			{
				vc+=Character.toUpperCase(cc);
			}}
			 
		Result rs=new Result(m, n, vc);
		return rs;
		}
	}
			
			
555555555555555sumOfPowerOfDigits55555555555555555
	public int sumOfPowerOfDigits(int input1){
		// Read only region end
		int sum=0, b=0, rem;
		while(input1>0)
		{
			rem=input1%10;
			int a=(int)Math.pow(rem,b);
			sum=sum+a;
			b=rem;
			input1=input1/10;
			
		}
		return sum;
	}
}


*******************************************************************************
import java.util.Scanner;

public class firstRepetetiveElement {

	public static void main(String[] args){
		// TODO Auto-generated method stub
int k, j = 0;

		Scanner reader=new Scanner(System.in);
System.out.println("Enter no. of elements");
int input2=reader.nextInt();
int[] input1=new int[input2];
System.out.println("Enter array Elements");
		for(int i=0;i<input2;i++)
		{
			input1[i]=reader.nextInt();
		}
int[] count=new int[input2];
for(int i=0;i<input2;i++)
{
	k=input1[i];
	if(k<=0)
	{
		System.out.println(0);
		break;
	}
	else
	{
	count[k]=count[k]+1;
	j=count[k];
	if(j>1)
	{
		System.out.println(k);
		break;
	}
}
	}
}
	}



*********************************************************
import java.util.Arrays;
import java.util.Scanner;

public class nonPrimeSumDifference {

	public static void main(String[] args) {
		int count = 0, flag = 0, sum = 0, first = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		Arrays.sort(input1);
		if (count == 0) {
			for (int i = input2-1; i >=0; i--) {
				if (input1[i] != 1) {
					for (int k = 2; k < input1[i]; k++) {

						if (input1[i] % k == 0) {
							flag = 1;
						}
					}
					if (flag != 0) {
						first = i;
						sum = sum + input1[i];
						//System.out.println(input1[i]);
					}
					flag = 0;
				}
			}
				System.out.println(sum - input1[first]);

			}
		}
	}


***************************************************************************

import java.util.Arrays;
import java.util.Scanner;

public class primeSumDifference {
	public static void main(String[] args) {
		int count = 0, flag = 0, sum = 0, first = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		Arrays.sort(input1);
		if (count == 0) {
			for (int i = input2-1; i >=0; i--) {
				if (input1[i] != 1) {
					for (int k = 2; k < input1[i]; k++) {

						if (input1[i] % k == 0) {
							flag = 1;
						}
					}
					if (flag == 0) {
						first = i;
						sum = sum + input1[i];
						//System.out.println(input1[i]);
					}
					flag = 0;
				}
			}
				System.out.println(sum - input1[first]);

			}
		}
	}



***************************************************************************************
import java.util.Scanner;

public class sumNonPrimeIndex {

	public static void main(String[] args) {
		int flag = 0, sum = 0, count = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		if (count == 0) {
			for (int i = 2; i < input2; i++) {
				for (int k = 2; k < i; k++) {
					if (i % k == 0) {
						flag++;
					}
				}
				if (flag > 0) {
					sum += input1[i];
				}
				flag = 0;
			}
			System.out.println(sum);
		}
	}
}


****************************************************************************

import java.util.Scanner;

public class sumPrimeIndex {
	public static void main(String[] args) {
		int flag = 0, sum = 0, count = 0;
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter no. of elements");
		int input2 = reader.nextInt();
		int[] input1 = new int[input2];
		System.out.println("Enter array Elements");
		for (int i = 0; i < input2; i++) {
			input1[i] = reader.nextInt();
		}
		for (int i = 0; i < input2; i++) {
			if (input1[i] <= 0) {
				count = 1;

				System.out.println(0);
			}
		}
		if (count == 0) {
			for (int i = 2; i < input2; i++) {
				for (int k = 2; k < i; k++) {
					if (i % k == 0) {
						flag = 1;
					}
				}
				if (flag == 0) {
					sum += input1[i];
				}
				flag = 0;

			}
			System.out.println(sum);
		}
	}
}

****************************************************************************

siri 1 sum-min prime  sum-max prime sum-min no.

package javaa;

import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.Collections;//important to fin min nd max number
class GFG
{
	public static void main (String[] args)
	{
		int arr[]={2,3,4,5,6,7,8,9,10,12,17,23};
        int size= arr.length;
        List a1=new ArrayList(); //using ArrayList to store prime numbers
        
        int i=0,sum=0;
        
        int smallest=arr[0];
        for(i=0;i<size;i++){
           if (arr[i] < smallest)
                smallest = arr[i];
        }
         System.out.println("smallest number is: " +smallest);
       for (i = 0; i < size; i++) 
       {
            boolean isPrime = true;
            if (arr[i] == 1)
                isPrime = false;
            else 
            {
                // check to see if the numbers are prime
                for (int j = 2; j <= arr[i] / 2; j++)
                {
                    if (arr[i] % j == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }
            }
            // print the number
            if (isPrime)
            {
               /* for(int j=0;j<=i;j++)
                {
                prime[j]=arr[i];
                }*/
                //System.out.println(arr[i] + " is a prime number in the array ");
                sum=sum+arr[i];
                a1.add(arr[i]);
            }    
            }System.out.println("list of prime numbers : " + a1);
         System.out.println("sum of prime numbers: " +sum);
         int max = (Integer) Collections.max(a1); //Collections.max() is an object..we're converting into integer format 
         int min = (Integer) Collections.min(a1);
         int a= sum-smallest;
         int b=sum-max;
         int c=sum-min;
         System.out.println("sum-smallest in array: " +a);
         System.out.println("sum-max prime: " +b);
         System.out.println("sum-min prime:" +c);  } }


*****************************************************************************

siri sum of no.s in primeindex  sum-min no. (non prime indices n sum)...


package javaa;
import java.io.*;
class PrimeNumbers
{
   public static void main (String[] args)
   {
       int arr[]={2,3,4,5,6,7,8,9,5,6,3};
       int size= arr.length;
       int sum=0;
       int i =0;
      int num =0;
        int[] primeNumbers=new int[size];      //array to store prime values
        for (i = 0; i < size; i++)   // ..      
       { 		  	  
            int counter=0; 	  
            for(num =i; num>=1; num--)
	        {
                 if(i%num==0)
	            {
 		            counter = counter + 1;
	            }
	        }                                //to find prime index
	          if (counter ==2)
	        {
	            for(int j=0 ;j<size; j++)
	            {
	                                       //Assigning the Primeindex  number to array String
	            primeNumbers[j]= arr[i];
	            } 
	         System.out.println( primeNumbers[i]);// printing the array
	         sum=sum+primeNumbers[i];
            }
	        }
        System.out.println("sum of numbers" +sum);
        
        int smallest=arr[0];// finding small numb in original aray
        for(i=0;i<size;i++)
        {
        if (arr[i] < smallest)
                smallest = arr[i];
        }
        System.out.println("smallest number is" +smallest);
        int c=sum-smallest;
        System.out.println("case2: " +c);
        } }



******************************gapmaxmin**************************************

public class JavaApplication38 {

    public static void main(String[] args) {

        int num[] = {5, 5, 6, 2, 3, 4, 6, 6, 2, 4, 8, 6};

        int max = 0;

        int min = 9;

        int i = 0, j = 0, flag = 0;

        int len = num.length;

        int p = 0;

        int count[] = new int[len];

        for (i = 0; i < len; i++) {

            for (j = i; j < len - 1; j++) {

                if (num[i] == num[j + 1]) {

                    count[p] = j - i;

                    flag = 1;

                }
            }

            if (flag == 1) {

                p++;
            }

            flag = 0;
        }

        for (i = 0; i < p - 1; i++) {

            if (count[i] > max) {

                max = count[i];

            }
        }

        for (i = 0; i < p - 1; i++) {

            if (count[i] < min) {

                min = count[i];

            }
        }

        System.out.println(max + "    " + min);
    }
}


*************************difCountStableUnstable***************************************
public class Stable {
	int difCountStableUnstable(int input1, int input2, int input3, int input4, int input5) {
		int dif = 0;
		int arr[] = { input1, input2, input3, input4, input5 };
		int maxstable = 0;
		int minUnStable = 10000000;// taking any arbitrary large number to
									// compare..
		for (int i = 0; i < arr.length; i++) {
			int n = arr[i];
			int c[] = new int[10];
			while (n != 0) {
				int next = n % 10;
				c[next] += 1;
				n = n / 10;
			}
			int freq = 0;
			for (int j = 0; j < c.length; j++) {
				if (c[j] != 0) {
					freq = c[j];
				}
			}

			int flag = 0;
			for (int j = 0; j < c.length; j++) {
				if (c[j] != 0 && c[j] != freq) {
					flag = 1;
					break;
				}

			}
			if (flag == 0) {
				if (arr[i] > maxstable)
					maxstable = arr[i];
			} else if (flag == 1) {
				System.out.println("i m here for" + arr[i]);
				if (arr[i] < minUnStable)
					minUnStable = arr[i];
			}
		}

		dif = maxstable - minUnStable;
		return dif;
	}

	public static void main(String[] args) {
		Stable s = new Stable();
		int diff = s.difCountStableUnstable(1234, 4788, 2222, 2266, 1000);
		System.out.println(diff);
	}
}

*******************************10,100,1000(Part 1)**************************************************
1st ele unit 2nd tens.. square each n add. less no. sqr 0

import java.util.Arrays;

public class LPAjmal {
	public static void main(String[] args) {
		int num[]={5,41,199,4786,23478,360};
		int len=num.length;
		//int[] z=new int[5];
		int z=0, sum=0;
		for(int i=0;i<5;i++)
		{
			int k=(int)Math.log10(num[i]);
			if(k==(i))
			{
				int l=(int) Math.pow(10, i);
				z=num[i]/l;
				sum+=z*z;
			}
					}
		System.out.println(sum);
		
	}
} 

*******************************10,100,1000(Part 2)**************************************************
1st ele unit 2nd tens.. square each n add. less no. sqr 0

public class C {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		C c= new C();
		int ar[]={23,235,45,4569,97836,12,0};
		System.out.println(c.PowerSum(ar, 7));
		
	}

	public int PowerSum(int[] input1, int input2) {
		int l = 1, m = 10, sum = 0;
		for (int i = 0; i < input2; i++) {
			input1[i] %= m;
			input1[i] /= l;
			sum += input1[i] * input1[i];
			m *= 10;
			l *= 10;
		}
		return sum;
	}
}

********************************************************************************
priyanka array sum * sum (ele negati =valu + index value)

public class A {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			A a= new A();
		int	input1 []={-2,3,4,3,5,-7,3,7,5,-1,0,8,5,7,9,13,15,12,11,17,8,9,-13,14,8,0};
		String s="wipro Technologies";
		System.out.println(a.sumWord(b,s));	
			
	}
	public int sumWord(int input1[], String input2){
		String s=input2.toUpperCase();
		String a[]=s.split(" ");
		int result=1;
		for(int i=0; i<a.length;i++){
			int sum=0;
			for(int j=0;j<a[i].length();j++){
				int k=a[i].charAt(j)-65;
				if(input1[k]<0){
					sum+=input1[k]+a[i].charAt(j)-64;}
				else
					sum+=input1[k];
			}
			result*=sum;
		}
		return result;
	}

}

*********************************************************
myn

public class B {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		B b= new B();
		String s="1101110111111011101111110";
		System.out.println(b.Alphabet(s));
	}

	public String Alphabet(String input1) {
		String[] a = input1.split("0");
		String res = "";
		for (int i = 0; i < a.length; i++) {
			if (!a[i].equals("")) // This condition is useful if they put "0"
									// first in input
			{
				char c = (char) (a[i].length() + 64);
				res += "" + c;
			}
		}
		return res;
	}
}

********************************************************************
cycles sum each colum n check fr no. in array add n return

public class D {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		D d= new D();
		int a[]={1,2,3,4,6};
		int b[]={4,5,6,7,3};
		int c[]={6,7,8,9,8};
		System.out.println(d.Equallength(a,b,c));
	}

	public int Equallength(int input1[], int input2[], int input3[]) {
		int p = input1.length;
		int sum = 0;
		for (int i = 1; i <= p; i++) {
			int k = input1[i - 1] + input2[i - 1] + input3[i - 1];
			int m = k % p;
			if (i % 3 == 1) {
				if (m == 0)
					sum += input1[p - 1];
				else
					sum += input1[m - 1];
			}
			if (i % 3 == 2) {
				if (m == 0)
					sum += input2[p - 1];
				else
					sum += input2[m - 1];
			}
			if (i % 3 == 0) {
				if (m == 0)
					sum += input3[p - 1];
				else
					sum += input3[m - 1];
			}
		}
		return sum;
	}
}

************************************************************************
addre key + - + - if neg brk.

public class E {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		E e = new E();
		int[] a = { 33, 45, -55, 11, 28 };
		System.out.println(e.AddressKey(a, 5));
	}

	public int AddressKey(int[] input1, int input2) {
		int flag = 0, sum = 0, addr = 0, k = 0;
		for (int i = 0; i < input2; i++) {
			if (flag == 0) {
				sum += Math.abs(input1[addr] % 10);
				flag = 1;
			} else {
				sum += -Math.abs(input1[addr] % 10);
				flag = 0;
			}
			System.out.println(k);
			if (input1[addr] < 0) {
				break;
			} else {
				k++;
				addr = input1[addr] / 10;
			}

		}
		if (k == 5) {
			Arrays.sort(input1);
			return input1[0];
		}
		return sum;
	}
}
*******************************************************
most leas max min = pin

public class F {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		F f= new F();
		int[] a={12,29,68,45,126,893};
		System.out.println(f.PinGen(a, 6));
	}

	public int PinGen(int[] input1, int input2) {
		int b[] = new int[10];
		int max = 0, min = 9, max1 = 0, min1 = 9, r = 0, t = 0, output = 0;
		for (int i = 0; i < input2; i++) {
			while (input1[i] > 0) {
				int k = input1[i] % 10;
				if (k > max) {
					max = k;
				}

				if (k < min) {
					min = k;
				}
				b[k] += 1;
				input1[i] = input1[i] / 10;
			}
		}
		for (int j = 0; j < 10; j++) {
			if (b[j] >= max1) {
				max1 = b[j];
				r = j;
			}
			if (b[j] < min1 && b[j] != 0) {
				min1 = b[j];
				t = j;
			}
		}
		output = r * 1000 + t * 100 + max * 10 + min;
		return output;
	}
}

*************************************************************************
public class G {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		G g = new G();
		int[] a = { 36, 2, 6, 4, 2, 36, 6, 9, 6, 4, 36, 102, 102, 8 };
		System.out.println(g.LeastOccur(a, 14));

	}

	public String LeastOccur(int[] input1, int input2) {
		int max = 0, sec = 0;
		int count1 = 0;
		int a[] = new int[input2];
		int b[] = new int[input2];

		for (int i = 0; i < input2; i++) {
			int count = 1;
			a[i] = input1[i];
			for (int j = 0; j < i; j++) {
				if (input1[i] == input1[j])
					count++;
			}
			b[i] = count;
			if (count > count1)
				count1 = count;
		}
		Arrays.sort(input1);
		for (int i = input2 - 1; i >= 0; i--) {
			if (b[i] == count1) {
				max = a[i];
				break;
			}
		}
		for (int i = input2 - 1; i >= 0; i--) {
			if (b[i] == count1 - 1) {
				sec = a[i];
				break;
			}
		}
		return "" + max + "" + sec + "" + input1[0];
	}
}

*******************************************************************************

(sum of pri ind[1]-sum of pri ind[2])*(2nd hig va(1)-2nd hig va(1))


public int findTwoArrayResult(int input1[],int input2[],int input3){
	
	int sum1=0,sum2=0,result=0;
		
	for(int i=2;i<input3;i++){
			
	int flag=0;
			
	for(int j=2;j<=i/2;j++){
		
	if(i%j==0)
					
	flag=1;}
		
	if(flag==0){
			
	sum1=input1[i];
			
	sum2=input2[i];
			
}
				
	
	}
		
	Arrays.sort(input1);
	
	Arrays.sort(input2);
		
	result=(sum1-sum2)*(input1[input3-2]-input2[input3-2]);
		

	return result;
	}

}

**************************************************************************

(sum of alternate pri ind[1]-sum of alternate pri ind[2])*(2nd hig va(1)-2nd hig va(1))


public int findTwoArrayResult(int input1[],int input2[],int input3){
	
	int sum1=0,sum2=0,result=0,flag1=0;
		
	for(int i=2;i<input3;i++){
		
	int flag=0;
		
	for(int j=2;j<=i/2;j++){
		
	if(i%j==0)
		
	flag=1;}

	if(flag==0){
			
	if(flag1==0){
			
	sum1=input1[i];
			
	sum2=input2[i];
			
	flag1=1;}
			
	else{
				
	flag1=0;
			
	}
				

				
	
		}
				
			

			
		}
		
	Arrays.sort(input1);
		
	Arrays.sort(input2);
		
	result=(sum1-sum2)*(input1[input3-2]+input2[input3-2]);
		
	
	return result;
	
}

}

*******************************************************************************

Unique cochi

public class unique {
 public static void main(String[] args) {
	String a = "Hello World";
	String b= "";
	a=a.toUpperCase();
	int count=0,d=0;
	for(int i=0;i<a.length();i++){
		count = 0;
		if(a.charAt(i)==' '){
			b = b + a.charAt(i);
			continue;
		}
		for(int j=0;j<a.length();j++){
			if(i==j)
				continue;
			if(a.charAt(i)==(a.charAt(j)))
			count++;
		}
		if(count>0)
			b=b + a.charAt(i);
	}
	String c[] = b.split(" ");
	b=b.replace(" ","");
	int len=c.length;
	for(int k=0;k<len;k++)
		d = d*10+c[k].length();
	a= b + ":" + d;
	System.out.println(a);
}
}

************************************************************************************

birth cochi

public class Age {
public static void main(String[] args) {
	String a = "32aym";
	a = a.toUpperCase();
	String c = "JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC";
	String e;
	int Cyear = 2017;
	int age =0,Byear=0,count = 0;
	char b[]=a.toCharArray();
	if((b[1]-48)<8)
		age = ((b[0]-48)*10 + (7-(b[1]-48)));
	else
		age = ((b[0]-48)*10 + 10 + (7-(b[1]-48)));
	Byear = Cyear - age;
	String d [] = c.split(",");
	a=a.substring(2, 5);
	for(int i=0;i<12;i++){
		count = 0;
		for(int j=0;j<3;j++){
			e = String.valueOf(a.charAt(j));
			if(d[i].contains(e))
				count++;
		}
		if(count==3){
			System.out.println(age+" "+d[i]+" "+Byear);
			break;
		}
	}
}
}

************************************************************************************
birth cochi simple

public class birth {
public static void main(String[] args) {
	String[] s = {"JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC"};
	String i = "32aym";
	String s2="";
	String s1 = i.substring(2,5).toUpperCase();
	System.out.println(s1);
	for(int j=0;j< s.length;j++){
		if(s[j].contains(String.valueOf(s1.charAt(0))) && s[j].contains(String.valueOf(s1.charAt(1))) && s[j].contains(String.valueOf(s1.charAt(2)))){
			s2=s[j];
			System.out.println(s2);
		}
	}
	int p = 2017;
	int x = (((i.charAt(0)-48)*10)+(7-(i.charAt(1)-48)));
	int y = p - x;
	System.out.println(x);
	System.out.println(s2+y+ "\t " +"age"+" "+x);
}
}










